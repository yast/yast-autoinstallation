/**
 * File:    clients/inst_autosetup.ycp
 * Package: Auto-installation
 * Summary: Setup and prepare system for auto-installation
 * Authors: Anas Nashif <nashif@suse.de>
 *          Uwe Gansert <ug@suse.de>
 *
 * $Id: inst_autosetup.ycp 61521 2010-03-29 09:10:07Z ug $
 */

{
    textdomain "autoinst";

    import "AutoinstConfig";
    import "AutoInstall";
    import "Installation";
    import "Profile";
    import "Progress";
    import "Report";
    import "AutoinstStorage";
    import "AutoinstScripts";
    import "AutoinstGeneral";
    import "AutoinstSoftware";
    import "Bootloader";
    import "BootCommon";
    import "Popup";
    import "RunlevelEd";
    import "Arch";
    import "AutoinstLVM";
    import "AutoinstRAID";
    import "Storage";
    import "Timezone";
    import "Keyboard";
    import "Call";
    import "ProductControl";
    import "LanUdevAuto";
    import "Language";
    import "Console";

    include "bootloader/routines/autoinstall.ycp";
    include "autoinstall/ask.ycp";

    define symbol readModified() {
        if (SCR::Read(.target.size, AutoinstConfig::modified_profile) > 0 ) {
            if (! Profile::ReadXML( AutoinstConfig::modified_profile ) || Profile::current == $[] ) {
                Popup::Error(_("Error while parsing the control file.
Check the log files for more details or fix the
control file and try again.
"));
                return `abort;
            }
            string cpcmd = sformat("mv %1 %2","/tmp/profile/autoinst.xml", "/tmp/profile/pre-autoinst.xml");
            y2milestone("copy original profile: %1",cpcmd);
            SCR::Execute(.target.bash, cpcmd);

            cpcmd = sformat("mv %1 %2", AutoinstConfig::modified_profile, "/tmp/profile/autoinst.xml");
            y2milestone("moving modified profile: %1",cpcmd);
            SCR::Execute(.target.bash, cpcmd);
            return `found;
        }
        return `not_found;
    }

    string help_text = _("<P>Please wait while the system is prepared for autoinstallation.</P>");
    list<string> progress_stages =
        [
    _("Configure General Settings "),
    _("Execute pre-install user scripts"),
    _("Set up language"),
    _("Configure Software selections"),
        ];

    list<string> progress_descriptions =
        [
    _("Configuring general settings..."),
    _("Executing pre-install user scripts..."),
    _("Configuring Software selections...")
        ];

    Progress::New(
            _("Preparing System for Automated Installation"),
            "",     // progress_title
            size( progress_stages ),	// progress bar length
            progress_stages,
            progress_descriptions,
            help_text );


    if(UI::PollInput() == `abort)
        if (Popup::ConfirmAbort (`painless))
            return `abort;
    Progress::NextStage();


    // configure general settings





    if(UI::PollInput() == `abort)
	if (Popup::ConfirmAbort (`painless))
	    return `abort;

    Progress::NextStage();

    // Pre-Scripts
    AutoinstScripts::Import(Profile::current["scripts"]:$[]);
    AutoinstScripts::Write("pre-scripts", false);

    // Reread Profile in case it was modified in pre-script
    // User has to create the new profile in a pre-defined
    // location for easy processing in pre-script.

    if( readModified() == `abort )
        return `abort;

    //
    // Partitioning and Storage
    ////////////////////////////////////////////////////////////////////////

    boolean modified = true;
    do {
        askDialog();
        // Pre-Scripts
        AutoinstScripts::Import(Profile::current["scripts"]:$[]);
        AutoinstScripts::Write("pre-scripts", false);
        symbol ret = readModified();
        if( ret == `abort )
            return `abort;
        if( ret == `not_found )
            modified = false;
    } while( modified == true );

    // reimport scripts, for the case <ask> has changed them
    AutoinstScripts::Import(Profile::current["scripts"]:$[]);
    //
    // Set Mouse and other workflow variables
    //
    AutoinstGeneral::Import(Profile::current["general"]:$[]);
    y2milestone("general: %1", Profile::current["general"]:$[] );
    AutoinstGeneral::Write();

    if( haskey( Profile::current, "add-on" ) ) {
        Call::Function("add-on_auto", ["Import", Profile::current["add-on"]:$[]] );
        Call::Function("add-on_auto", ["Write"]);
    }

    boolean use_utf8 = true;		// utf8 is default

    map displayinfo = UI::GetDisplayInfo();
    if ( ! displayinfo["HasFullUtf8Support"]:true )
    {
	use_utf8 = false;		// fallback to ascii
    }


    //
    // Set it in the Language module.
    //
    Progress::NextStep();
    Progress::Title(_("Configuring language..."));
    Language::Import( Profile::current["language"]:$[] );

    //
    // Set Console font
    //
    Installation::encoding = Console::SelectFont( Language::language );

    if (displayinfo["HasFullUtf8Support"]:true)
    {
        Installation::encoding = "UTF-8";
    }

    UI::SetLanguage (Language::language, Installation::encoding);
    WFM::SetLanguage (Language::language, "UTF-8");

    if( haskey( Profile::current, "timezone" ) )
        Timezone::Import(Profile::current["timezone"]:$[]);
    if( haskey( Profile::current, "keyboard" ) )
        Keyboard::Import(Profile::current["keyboard"]:$[]);


    // one can override the <confirm> option by the commandline parameter y2confirm
    string tmp = (string)SCR::Read (.target.string, "/proc/cmdline");
    if (tmp != nil && contains (splitstring (tmp, " \n"), "y2confirm")) {
        AutoinstConfig::Confirm = true;
        y2milestone("y2confirm found and confirm turned on");
    }


    if(UI::PollInput() == `abort)
	if (Popup::ConfirmAbort (`painless))
	    return `abort;

    // moved here from autoinit for fate #301193
    // needs testing
    if( Arch::s390 () && AutoinstConfig::remoteProfile == true ) {
       y2milestone("arch=s390 and remote_profile=true");
       if( haskey(Profile::current, "dasd") ) {
            y2milestone("dasd found");
            Call::Function("dasd_auto", ["Import", Profile::current["dasd"]:$[] ]);
        }
        if( haskey(Profile::current, "zfcp") ) {
            y2milestone("zfcp found");
            Call::Function("zfcp_auto", ["Import", Profile::current["zfcp"]:$[] ]);
        }
    }

    Progress::NextStage();

    if (! (Mode::autoupgrade() && AutoinstConfig::ProfileInRootPart)) {
	// reread only if target system is not yet initialized (bnc#673033)
	Storage::ReReadTargetMap();
        if (`abort == WFM::CallFunction("inst_update_partition_auto", []))
	    return `abort;
    }


    // Software

    if(UI::PollInput() == `abort)
	if (Popup::ConfirmAbort (`painless))
	    return `abort;

    Progress::NextStage();

        // initialize package manager
	import "Packages";
	import "PackageCallbacks";
	import "Update";
	import "RootPart";
	import "ProductFeatures";
	import "Product";

// FIXME FIXME FIXME copy-paste from update_proposal
    map <string, any> GetUpdateConf () {
        // 'nil' values are skipped, in that case, ZYPP uses own default values
        map <string, boolean> ret = $[];

// not supported by libzypp anymore
//      if (Update::deleteOldPackages != nil) {
//          ret["delete_unmaintained"] = Update::deleteOldPackages;
//      }

        if (Update::silentlyDowngradePackages != nil) {
            ret["silent_downgrades"] = Update::silentlyDowngradePackages;
        }

        y2milestone ("Using update configuration: %1", ret);

        return ret;
    }

        Packages::Init(true);

        // initialize target
        if (true)
        {
            PackageCallbacks::SetConvertDBCallbacks ();

            Pkg::TargetInit (Installation::destdir, false);

            Update::GetProductName ();
        }

        // FATE #301990, Bugzilla #238488
        // Set initial update-related (packages/patches) values from control file
        Update::InitUpdate();

        // some products are listed in media control file and at least one is compatible
        // with system just being updated
        boolean update_not_possible = false;

        // FATE #301844
        y2milestone ("Previous '%1', New '%2' RootPart",
            RootPart::previousRootPartition, RootPart::selectedRootPartition);
        if (RootPart::previousRootPartition != RootPart::selectedRootPartition) {
            RootPart::previousRootPartition = RootPart::selectedRootPartition;

            // check whether update is possible
            // reset deleteOldPackages and onlyUpdateInstalled in respect to the selected system
            Update::Reset();
            if (! Update::IsProductSupportedForUpgrade()) {
                y2milestone ("Upgrade is not supported");
                update_not_possible = true;
            }
        }

	// this is new - override the default upgrade mode
	if (Profile::current["upgrade","only_installed_packages"]:nil != nil)
	    Update::onlyUpdateInstalled = Profile::current["upgrade","only_installed_packages"]:true;

        // connect target with package manager
        if (!Update::did_init1)
        {
            Update::did_init1 = true;

            list<string> restore = [];
            list<map<string,any> > selected = Pkg::ResolvableProperties ("", `product, "");
            foreach (map<string,any> s, selected, {
                restore = add (restore, s["name"]:"");
            });

            Pkg::PkgApplReset ();

            // bnc #300540
            // bnc #391785
            // Drops packages after PkgApplReset, not before (that would null that)
            Update::DropObsoletePackages();

            foreach (string res, restore, {
                Pkg::ResolvableInstall (res, `product);
            });
            if (! Update::onlyUpdateInstalled)
            {
		Update::SetDesktopPattern ();
            }

            if (!Update::onlyUpdateInstalled            // just consider already installed packages
                && (!ProductFeatures::GetBooleanFeature ("software", "only_update_installed")))
	    {
		foreach (string pat, Product::patterns, {
		    y2milestone("Pre-select pattern %1", pat);
		    Pkg::ResolvableInstall( pat, `pattern );
		});
	    }


            Packages::SelectProduct();
            // bnc #382208

            // bnc#582702 - do not select kernel on update, leave that on dependencies like 'zypper dup'
            // therefore commented line below out
//          Packages::SelectKernelPackages ();

            // FATE #301990, Bugzilla #238488
            // Control the upgrade process better
            map <symbol, integer> update_sum
                = Pkg::PkgUpdateAll (GetUpdateConf());
            y2milestone ("Update summary: %1", update_sum);
            Update::unknown_packages = update_sum[`ProblemListSze]:0;

            list<string> sys_patterns = Packages::ComputeSystemPatternList ();
            foreach (string pat, sys_patterns, {
                Pkg::ResolvableInstall (pat, `pattern);
            });
	    // this is new, (de)select stuff from the profile
            list<string> packages = Profile::current["software","packages"]:[];
            list<string> patterns = Profile::current["software","patterns"]:[];
            list<string> products = Profile::current["software","products"]:[];
            list<string> remove_packages = Profile::current["software","remove-packages"]:[];
            list<string> remove_patterns = Profile::current["software","remove-patterns"]:[];
            list<string> remove_products = Profile::current["software","remove-products"]:[];
	    // neutralize first, otherwise the change may have no effect
	    foreach (string p, remove_patterns, {
		Pkg::ResolvableNeutral (p, `pattern, true);
	    });
	    foreach (string p, remove_packages, {
		Pkg::ResolvableNeutral (p, `package, true);
	    });
	    foreach (string p, remove_products, {
		Pkg::ResolvableNeutral (p, `product, true);
	    });
	    foreach (string p, patterns, {
		Pkg::ResolvableNeutral (p, `pattern, true);
	    });
	    foreach (string p, packages, {
		Pkg::ResolvableNeutral (p, `package, true);
	    });
	    foreach (string p, products, {
		Pkg::ResolvableNeutral (p, `product, true);
	    });
	    // now set the final status
	    foreach (string p, remove_patterns, {
		Pkg::ResolvableRemove (p, `pattern);
	    });
	    foreach (string p, remove_packages, {
		Pkg::ResolvableRemove (p, `package);
	    });
	    foreach (string p, remove_products, {
		Pkg::ResolvableRemove (p, `product);
	    });
	    foreach (string p, patterns, {
		Pkg::ResolvableInstall (p, `pattern);
	    });
	    foreach (string p, packages, {
		Pkg::ResolvableInstall (p, `package);
	    });
	    foreach (string p, products, {
		Pkg::ResolvableInstall (p, `product);
	    });
	    // old stuff again here
            if (Pkg::PkgSolve (!Update::onlyUpdateInstalled))
                Update::solve_errors = 0;
            else
	    {
                Update::solve_errors = Pkg::PkgSolveErrors ();
		if (Profile::current["upgrade","stop_on_solver_conflict"]:true)
		    AutoinstConfig::Confirm = true;
	    }

        }

    // Backup
    y2internal ("Backup: %1", Profile::current["backup"]:nil);
    Installation::update_backup_modified = Profile::current["backup","modified"]:true;
    y2internal ("Backup modified: %1", Installation::update_backup_modified);
    Installation::update_backup_sysconfig = Profile::current["backup","sysconfig"]:true;
    Installation::update_remove_old_backups = Profile::current["backup","remove_old"]:false;

    AutoInstall::TurnOff();
    Progress::Finish();

    symbol ret = ProductControl::RunFrom ( ProductControl::CurrentStep () + 1, true);
    if (ret == `next)
	return `finish;
    return ret;
}
